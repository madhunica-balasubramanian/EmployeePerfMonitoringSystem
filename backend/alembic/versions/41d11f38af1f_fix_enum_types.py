"""Fix enum types

Revision ID: 41d11f38af1f
Revises: 
Create Date: 2025-04-18 20:05:32.003411

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '41d11f38af1f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_metric_records_id', table_name='metric_records')
    op.drop_table('metric_records')
    op.drop_index('ix_metric_definitions_id', table_name='metric_definitions')
    op.drop_table('metric_definitions')
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.drop_table('users')
    op.drop_index('ix_departments_id', table_name='departments')
    op.drop_table('departments')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('departments',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('departments_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('USPS', 'HEALTHCARE', 'TRANSPORTATION', name='departmenttype'), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='departments_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_departments_id', 'departments', ['id'], unique=False)
    op.create_table('users',
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('role', postgresql.ENUM('EMPLOYEE', 'SUPERVISOR', 'ADMIN', name='roletype'), autoincrement=False, nullable=False),
    sa.Column('department_role', postgresql.ENUM('HEALTHCARE_STAFF', 'HEALTHCARE_STAFF2', 'HEALTHCARE_STAFF3', 'USPS_STAFF2', 'USPS_STAFF3', name='department_roletype'), autoincrement=False, nullable=False),
    sa.Column('department_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('employee_id', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], name='users_department_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('employee_id', name='users_employee_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=True)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.create_table('metric_definitions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('metric_definitions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('metric_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('metric_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metric_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('department_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('metric_formula', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metric_formula_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_aggregated', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_numeric', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], name='metric_definitions_department_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='metric_definitions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_metric_definitions_id', 'metric_definitions', ['id'], unique=False)
    op.create_table('metric_records',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('metric_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('metric_type', postgresql.ENUM('performance', 'wellness', name='metrictypeenum'), autoincrement=False, nullable=False),
    sa.Column('value_numeric', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('value_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('value_json', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('recorded_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['metric_id'], ['metric_definitions.id'], name='metric_records_metric_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='metric_records_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='metric_records_pkey')
    )
    op.create_index('ix_metric_records_id', 'metric_records', ['id'], unique=False)
    # ### end Alembic commands ###
